#!/usr/bin/env python3
# Parser generado por YAPar CLI

PRODUCTIONS = [('program', [['stmt_list']]), ('stmt_list', [['stmt_list', 'stmt'], ['stmt'], ['/*', 'empty', '*/']]), ('stmt', [['assignment'], ['block'], ['if_stmt'], ['while_stmt']]), ('assignment', [['ID', 'ASSIGN', 'expr', 'SEMICOLON'], ['ID', 'LBRACKET', 'expr', 'RBRACKET', 'ASSIGN', 'expr', 'SEMICOLON']]), ('block', [['LBRACE', 'stmt_list', 'RBRACE']]), ('if_stmt', [['IF', 'LPAREN', 'cond_expr', 'RPAREN', 'COLON', 'block'], ['IF', 'LPAREN', 'cond_expr', 'RPAREN', 'COLON', 'block', 'ELSE', 'COLON', 'block']]), ('while_stmt', [['WHILE', 'LPAREN', 'cond_expr', 'RPAREN', 'COLON', 'block']]), ('cond_expr', [['expr', 'EQUALS', 'expr'], ['expr', 'NOTEQUAL', 'expr'], ['expr', 'LESS', 'expr'], ['expr', 'GREATER', 'expr'], ['expr', 'LESSEQ', 'expr'], ['expr', 'GREATEREQ', 'expr'], ['expr']]), ('expr', [['expr', 'PLUS', 'term'], ['expr', 'MINUS', 'term'], ['term']]), ('term', [['term', 'TIMES', 'factor'], ['term', 'DIVIDE', 'factor'], ['factor']]), ('factor', [['LPAREN', 'expr', 'RPAREN'], ['ID'], ['NUMBER'], ['ID', 'LBRACKET', 'expr', 'RBRACKET']])]

ACTION = {(0, 'ID'): ('shift', 9), (0, 'WHILE'): ('shift', 12), (0, 'IF'): ('shift', 11), (0, '/*'): ('shift', 8), (0, 'LBRACE'): ('shift', 10), (1, '$'): ('accept', None), (2, 'ID'): ('shift', 9), (2, 'WHILE'): ('shift', 12), (2, 'IF'): ('shift', 11), (2, '$'): ('reduce', 0), (2, 'LBRACE'): ('shift', 10), (3, 'IF'): ('reduce', 1), (3, 'LBRACE'): ('reduce', 1), (3, '$'): ('reduce', 1), (3, 'WHILE'): ('reduce', 1), (3, 'RBRACE'): ('reduce', 1), (3, 'ID'): ('reduce', 1), (4, 'LBRACE'): ('reduce', 2), (4, '$'): ('reduce', 2), (4, 'ID'): ('reduce', 2), (4, 'IF'): ('reduce', 2), (4, 'WHILE'): ('reduce', 2), (4, 'RBRACE'): ('reduce', 2), (5, 'LBRACE'): ('reduce', 2), (5, '$'): ('reduce', 2), (5, 'ID'): ('reduce', 2), (5, 'IF'): ('reduce', 2), (5, 'WHILE'): ('reduce', 2), (5, 'RBRACE'): ('reduce', 2), (6, 'LBRACE'): ('reduce', 2), (6, '$'): ('reduce', 2), (6, 'ID'): ('reduce', 2), (6, 'IF'): ('reduce', 2), (6, 'WHILE'): ('reduce', 2), (6, 'RBRACE'): ('reduce', 2), (7, 'LBRACE'): ('reduce', 2), (7, '$'): ('reduce', 2), (7, 'ID'): ('reduce', 2), (7, 'IF'): ('reduce', 2), (7, 'WHILE'): ('reduce', 2), (7, 'RBRACE'): ('reduce', 2), (8, 'empty'): ('shift', 14), (9, 'LBRACKET'): ('shift', 16), (9, 'ASSIGN'): ('shift', 15), (10, 'ID'): ('shift', 9), (10, 'WHILE'): ('shift', 12), (10, 'IF'): ('shift', 11), (10, '/*'): ('shift', 8), (10, 'LBRACE'): ('shift', 10), (11, 'LPAREN'): ('shift', 18), (12, 'LPAREN'): ('shift', 19), (13, 'IF'): ('reduce', 1), (13, 'LBRACE'): ('reduce', 1), (13, '$'): ('reduce', 1), (13, 'WHILE'): ('reduce', 1), (13, 'RBRACE'): ('reduce', 1), (13, 'ID'): ('reduce', 1), (14, '*/'): ('shift', 20), (15, 'ID'): ('shift', 24), (15, 'NUMBER'): ('shift', 26), (15, 'LPAREN'): ('shift', 25), (16, 'ID'): ('shift', 24), (16, 'NUMBER'): ('shift', 26), (16, 'LPAREN'): ('shift', 25), (17, 'RBRACE'): ('shift', 28), (17, 'ID'): ('shift', 9), (17, 'IF'): ('shift', 11), (17, 'WHILE'): ('shift', 12), (17, 'LBRACE'): ('shift', 10), (18, 'LPAREN'): ('shift', 25), (18, 'ID'): ('shift', 24), (18, 'NUMBER'): ('shift', 26), (19, 'ID'): ('shift', 24), (19, 'NUMBER'): ('shift', 26), (19, 'LPAREN'): ('shift', 25), (20, 'IF'): ('reduce', 1), (20, 'LBRACE'): ('reduce', 1), (20, '$'): ('reduce', 1), (20, 'WHILE'): ('reduce', 1), (20, 'RBRACE'): ('reduce', 1), (20, 'ID'): ('reduce', 1), (21, 'PLUS'): ('shift', 33), (21, 'SEMICOLON'): ('shift', 32), (21, 'MINUS'): ('shift', 34), (22, 'TIMES'): ('shift', 35), (22, 'DIVIDE'): ('shift', 36), (22, 'MINUS'): ('reduce', 8), (22, 'GREATEREQ'): ('reduce', 8), (22, 'LESSEQ'): ('reduce', 8), (22, 'GREATER'): ('reduce', 8), (22, 'SEMICOLON'): ('reduce', 8), (22, 'LESS'): ('reduce', 8), (22, 'EQUALS'): ('reduce', 8), (22, 'PLUS'): ('reduce', 8), (22, 'RBRACKET'): ('reduce', 8), (22, 'RPAREN'): ('reduce', 8), (22, 'NOTEQUAL'): ('reduce', 8), (23, 'MINUS'): ('reduce', 9), (23, 'GREATEREQ'): ('reduce', 9), (23, 'DIVIDE'): ('reduce', 9), (23, 'PLUS'): ('reduce', 9), (23, 'SEMICOLON'): ('reduce', 9), (23, 'RPAREN'): ('reduce', 9), (23, 'NOTEQUAL'): ('reduce', 9), (23, 'TIMES'): ('reduce', 9), (23, 'LESSEQ'): ('reduce', 9), (23, 'GREATER'): ('reduce', 9), (23, 'LESS'): ('reduce', 9), (23, 'EQUALS'): ('reduce', 9), (23, 'RBRACKET'): ('reduce', 9), (24, 'MINUS'): ('reduce', 10), (24, 'GREATEREQ'): ('reduce', 10), (24, 'DIVIDE'): ('reduce', 10), (24, 'PLUS'): ('reduce', 10), (24, 'RPAREN'): ('reduce', 10), (24, 'SEMICOLON'): ('reduce', 10), (24, 'NOTEQUAL'): ('reduce', 10), (24, 'TIMES'): ('reduce', 10), (24, 'LESSEQ'): ('reduce', 10), (24, 'GREATER'): ('reduce', 10), (24, 'LESS'): ('reduce', 10), (24, 'EQUALS'): ('reduce', 10), (24, 'RBRACKET'): ('reduce', 10), (24, 'LBRACKET'): ('shift', 37), (25, 'ID'): ('shift', 24), (25, 'NUMBER'): ('shift', 26), (25, 'LPAREN'): ('shift', 25), (26, 'MINUS'): ('reduce', 10), (26, 'GREATEREQ'): ('reduce', 10), (26, 'DIVIDE'): ('reduce', 10), (26, 'PLUS'): ('reduce', 10), (26, 'RPAREN'): ('reduce', 10), (26, 'SEMICOLON'): ('reduce', 10), (26, 'NOTEQUAL'): ('reduce', 10), (26, 'TIMES'): ('reduce', 10), (26, 'LESSEQ'): ('reduce', 10), (26, 'GREATER'): ('reduce', 10), (26, 'LESS'): ('reduce', 10), (26, 'EQUALS'): ('reduce', 10), (26, 'RBRACKET'): ('reduce', 10), (27, 'PLUS'): ('shift', 33), (27, 'RBRACKET'): ('shift', 39), (27, 'MINUS'): ('shift', 34), (28, 'LBRACE'): ('reduce', 4), (28, '$'): ('reduce', 4), (28, 'ELSE'): ('reduce', 4), (28, 'ID'): ('reduce', 4), (28, 'IF'): ('reduce', 4), (28, 'WHILE'): ('reduce', 4), (28, 'RBRACE'): ('reduce', 4), (29, 'RPAREN'): ('shift', 40), (30, 'NOTEQUAL'): ('shift', 42), (30, 'GREATEREQ'): ('shift', 46), (30, 'LESSEQ'): ('shift', 45), (30, 'LESS'): ('shift', 43), (30, 'RPAREN'): ('reduce', 7), (30, 'GREATER'): ('shift', 44), (30, 'PLUS'): ('shift', 33), (30, 'EQUALS'): ('shift', 41), (30, 'MINUS'): ('shift', 34), (31, 'RPAREN'): ('shift', 47), (32, 'LBRACE'): ('reduce', 3), (32, '$'): ('reduce', 3), (32, 'ID'): ('reduce', 3), (32, 'IF'): ('reduce', 3), (32, 'WHILE'): ('reduce', 3), (32, 'RBRACE'): ('reduce', 3), (33, 'ID'): ('shift', 24), (33, 'NUMBER'): ('shift', 26), (33, 'LPAREN'): ('shift', 25), (34, 'ID'): ('shift', 24), (34, 'NUMBER'): ('shift', 26), (34, 'LPAREN'): ('shift', 25), (35, 'ID'): ('shift', 24), (35, 'NUMBER'): ('shift', 26), (35, 'LPAREN'): ('shift', 25), (36, 'ID'): ('shift', 24), (36, 'NUMBER'): ('shift', 26), (36, 'LPAREN'): ('shift', 25), (37, 'ID'): ('shift', 24), (37, 'NUMBER'): ('shift', 26), (37, 'LPAREN'): ('shift', 25), (38, 'RPAREN'): ('shift', 53), (38, 'PLUS'): ('shift', 33), (38, 'MINUS'): ('shift', 34), (39, 'ASSIGN'): ('shift', 54), (40, 'COLON'): ('shift', 55), (41, 'ID'): ('shift', 24), (41, 'NUMBER'): ('shift', 26), (41, 'LPAREN'): ('shift', 25), (42, 'ID'): ('shift', 24), (42, 'NUMBER'): ('shift', 26), (42, 'LPAREN'): ('shift', 25), (43, 'ID'): ('shift', 24), (43, 'NUMBER'): ('shift', 26), (43, 'LPAREN'): ('shift', 25), (44, 'ID'): ('shift', 24), (44, 'NUMBER'): ('shift', 26), (44, 'LPAREN'): ('shift', 25), (45, 'ID'): ('shift', 24), (45, 'NUMBER'): ('shift', 26), (45, 'LPAREN'): ('shift', 25), (46, 'ID'): ('shift', 24), (46, 'NUMBER'): ('shift', 26), (46, 'LPAREN'): ('shift', 25), (47, 'COLON'): ('shift', 62), (48, 'TIMES'): ('shift', 35), (48, 'MINUS'): ('reduce', 8), (48, 'GREATEREQ'): ('reduce', 8), (48, 'LESSEQ'): ('reduce', 8), (48, 'GREATER'): ('reduce', 8), (48, 'SEMICOLON'): ('reduce', 8), (48, 'LESS'): ('reduce', 8), (48, 'EQUALS'): ('reduce', 8), (48, 'PLUS'): ('reduce', 8), (48, 'RBRACKET'): ('reduce', 8), (48, 'RPAREN'): ('reduce', 8), (48, 'NOTEQUAL'): ('reduce', 8), (48, 'DIVIDE'): ('shift', 36), (49, 'TIMES'): ('shift', 35), (49, 'DIVIDE'): ('shift', 36), (49, 'MINUS'): ('reduce', 8), (49, 'GREATEREQ'): ('reduce', 8), (49, 'LESSEQ'): ('reduce', 8), (49, 'GREATER'): ('reduce', 8), (49, 'SEMICOLON'): ('reduce', 8), (49, 'LESS'): ('reduce', 8), (49, 'EQUALS'): ('reduce', 8), (49, 'PLUS'): ('reduce', 8), (49, 'RBRACKET'): ('reduce', 8), (49, 'RPAREN'): ('reduce', 8), (49, 'NOTEQUAL'): ('reduce', 8), (50, 'MINUS'): ('reduce', 9), (50, 'GREATEREQ'): ('reduce', 9), (50, 'DIVIDE'): ('reduce', 9), (50, 'PLUS'): ('reduce', 9), (50, 'SEMICOLON'): ('reduce', 9), (50, 'RPAREN'): ('reduce', 9), (50, 'NOTEQUAL'): ('reduce', 9), (50, 'TIMES'): ('reduce', 9), (50, 'LESSEQ'): ('reduce', 9), (50, 'GREATER'): ('reduce', 9), (50, 'LESS'): ('reduce', 9), (50, 'EQUALS'): ('reduce', 9), (50, 'RBRACKET'): ('reduce', 9), (51, 'MINUS'): ('reduce', 9), (51, 'GREATEREQ'): ('reduce', 9), (51, 'DIVIDE'): ('reduce', 9), (51, 'PLUS'): ('reduce', 9), (51, 'SEMICOLON'): ('reduce', 9), (51, 'RPAREN'): ('reduce', 9), (51, 'NOTEQUAL'): ('reduce', 9), (51, 'TIMES'): ('reduce', 9), (51, 'LESSEQ'): ('reduce', 9), (51, 'GREATER'): ('reduce', 9), (51, 'LESS'): ('reduce', 9), (51, 'EQUALS'): ('reduce', 9), (51, 'RBRACKET'): ('reduce', 9), (52, 'PLUS'): ('shift', 33), (52, 'MINUS'): ('shift', 34), (52, 'RBRACKET'): ('shift', 63), (53, 'MINUS'): ('reduce', 10), (53, 'GREATEREQ'): ('reduce', 10), (53, 'DIVIDE'): ('reduce', 10), (53, 'PLUS'): ('reduce', 10), (53, 'RPAREN'): ('reduce', 10), (53, 'SEMICOLON'): ('reduce', 10), (53, 'NOTEQUAL'): ('reduce', 10), (53, 'TIMES'): ('reduce', 10), (53, 'LESSEQ'): ('reduce', 10), (53, 'GREATER'): ('reduce', 10), (53, 'LESS'): ('reduce', 10), (53, 'EQUALS'): ('reduce', 10), (53, 'RBRACKET'): ('reduce', 10), (54, 'ID'): ('shift', 24), (54, 'NUMBER'): ('shift', 26), (54, 'LPAREN'): ('shift', 25), (55, 'LBRACE'): ('shift', 10), (56, 'PLUS'): ('shift', 33), (56, 'MINUS'): ('shift', 34), (56, 'RPAREN'): ('reduce', 7), (57, 'PLUS'): ('shift', 33), (57, 'MINUS'): ('shift', 34), (57, 'RPAREN'): ('reduce', 7), (58, 'PLUS'): ('shift', 33), (58, 'RPAREN'): ('reduce', 7), (58, 'MINUS'): ('shift', 34), (59, 'PLUS'): ('shift', 33), (59, 'RPAREN'): ('reduce', 7), (59, 'MINUS'): ('shift', 34), (60, 'PLUS'): ('shift', 33), (60, 'MINUS'): ('shift', 34), (60, 'RPAREN'): ('reduce', 7), (61, 'PLUS'): ('shift', 33), (61, 'RPAREN'): ('reduce', 7), (61, 'MINUS'): ('shift', 34), (62, 'LBRACE'): ('shift', 10), (63, 'MINUS'): ('reduce', 10), (63, 'GREATEREQ'): ('reduce', 10), (63, 'DIVIDE'): ('reduce', 10), (63, 'PLUS'): ('reduce', 10), (63, 'RPAREN'): ('reduce', 10), (63, 'SEMICOLON'): ('reduce', 10), (63, 'NOTEQUAL'): ('reduce', 10), (63, 'TIMES'): ('reduce', 10), (63, 'LESSEQ'): ('reduce', 10), (63, 'GREATER'): ('reduce', 10), (63, 'LESS'): ('reduce', 10), (63, 'EQUALS'): ('reduce', 10), (63, 'RBRACKET'): ('reduce', 10), (64, 'PLUS'): ('shift', 33), (64, 'MINUS'): ('shift', 34), (64, 'SEMICOLON'): ('shift', 67), (65, 'ELSE'): ('shift', 68), (65, 'LBRACE'): ('reduce', 5), (65, '$'): ('reduce', 5), (65, 'ID'): ('reduce', 5), (65, 'IF'): ('reduce', 5), (65, 'WHILE'): ('reduce', 5), (65, 'RBRACE'): ('reduce', 5), (66, 'LBRACE'): ('reduce', 6), (66, '$'): ('reduce', 6), (66, 'ID'): ('reduce', 6), (66, 'IF'): ('reduce', 6), (66, 'WHILE'): ('reduce', 6), (66, 'RBRACE'): ('reduce', 6), (67, 'LBRACE'): ('reduce', 3), (67, '$'): ('reduce', 3), (67, 'ID'): ('reduce', 3), (67, 'IF'): ('reduce', 3), (67, 'WHILE'): ('reduce', 3), (67, 'RBRACE'): ('reduce', 3), (68, 'COLON'): ('shift', 69), (69, 'LBRACE'): ('shift', 10), (70, 'LBRACE'): ('reduce', 5), (70, '$'): ('reduce', 5), (70, 'ID'): ('reduce', 5), (70, 'IF'): ('reduce', 5), (70, 'WHILE'): ('reduce', 5), (70, 'RBRACE'): ('reduce', 5)}

GOTO = {(0, 'assignment'): 4, (0, 'if_stmt'): 6, (0, 'stmt'): 3, (0, 'while_stmt'): 7, (0, 'block'): 5, (0, 'stmt_list'): 2, (0, 'program'): 1, (2, 'assignment'): 4, (2, 'if_stmt'): 6, (2, 'stmt'): 13, (2, 'while_stmt'): 7, (2, 'block'): 5, (10, 'assignment'): 4, (10, 'if_stmt'): 6, (10, 'stmt'): 3, (10, 'while_stmt'): 7, (10, 'block'): 5, (10, 'stmt_list'): 17, (15, 'factor'): 23, (15, 'expr'): 21, (15, 'term'): 22, (16, 'factor'): 23, (16, 'expr'): 27, (16, 'term'): 22, (17, 'assignment'): 4, (17, 'if_stmt'): 6, (17, 'stmt'): 13, (17, 'while_stmt'): 7, (17, 'block'): 5, (18, 'factor'): 23, (18, 'expr'): 30, (18, 'cond_expr'): 29, (18, 'term'): 22, (19, 'factor'): 23, (19, 'expr'): 30, (19, 'cond_expr'): 31, (19, 'term'): 22, (25, 'factor'): 23, (25, 'expr'): 38, (25, 'term'): 22, (33, 'factor'): 23, (33, 'term'): 48, (34, 'factor'): 23, (34, 'term'): 49, (35, 'factor'): 50, (36, 'factor'): 51, (37, 'factor'): 23, (37, 'expr'): 52, (37, 'term'): 22, (41, 'factor'): 23, (41, 'expr'): 56, (41, 'term'): 22, (42, 'factor'): 23, (42, 'expr'): 57, (42, 'term'): 22, (43, 'factor'): 23, (43, 'expr'): 58, (43, 'term'): 22, (44, 'factor'): 23, (44, 'expr'): 59, (44, 'term'): 22, (45, 'factor'): 23, (45, 'expr'): 60, (45, 'term'): 22, (46, 'factor'): 23, (46, 'expr'): 61, (46, 'term'): 22, (54, 'factor'): 23, (54, 'expr'): 64, (54, 'term'): 22, (55, 'block'): 65, (62, 'block'): 66, (69, 'block'): 70}

def parse(tokens):
    """Parser SLR(1) autónomo: recibe lista de token names y devuelve acciones."""
    state_stack = [0]
    symbol_stack = []
    log = []
    tokens = tokens + ['$']  # agregamos EOF al final
    for a in tokens:
        while True:
            s = state_stack[-1]
            act = ACTION.get((s, a))
            if act is None:
                raise Exception(f"Token inesperado '{a}' en estado {s}")
            kind, target = act
            if kind == 'shift':
                log.append((s, f"shift {a}"))
                symbol_stack.append(a)
                state_stack.append(target)
                break  # avanzamos al siguiente token
            elif kind == 'reduce':
                lhs, rhs_list = PRODUCTIONS[target]
                chosen_rhs = None
                for alt in rhs_list:
                    if len(alt) <= len(symbol_stack) and symbol_stack[-len(alt):] == alt:
                        chosen_rhs = alt
                        break
                if chosen_rhs is None:
                    chosen_rhs = rhs_list[0]
                for _ in chosen_rhs:
                    symbol_stack.pop()
                    state_stack.pop()
                log.append((s, f"reduce {lhs} -> {' '.join(chosen_rhs)}"))
                s2 = state_stack[-1]
                j = GOTO.get((s2, lhs))
                if j is None:
                    raise Exception(f"No hay GOTO para '{lhs}' en estado {s2}")
                symbol_stack.append(lhs)
                state_stack.append(j)
                continue
            elif kind == 'accept':
                log.append((s, 'accept'))
                return log
            else:
                raise Exception(f"Acción desconocida '{kind}' en estado {s}")
    return log

if __name__ == '__main__':
    import sys
    data = sys.stdin.read().split()
    try:
        result = parse(data)
        for state, action in result:
            print(state, action)
    except Exception as e:
        print('Error durante el parseo:', e)

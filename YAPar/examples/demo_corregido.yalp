/* demo_corregido.yalp - FIXED */

/* 1) Declaraci√≥n de todos los tokens */
%token IF ELSE WHILE 
%token EQUALS NOTEQUAL GREATEREQ LESSEQ LESS GREATER 
%token PLUS MINUS TIMES DIVIDE 
%token LPAREN RPAREN LBRACKET RBRACKET LBRACE RBRACE 
%token COLON SEMICOLON ASSIGN COMMA 
%token ID NUMBER

/* 2) Ignorar espacios y comentarios */
IGNORE WHITESPACE COMMENT

%%

program:
    stmt_list
;

stmt_list:
    stmt_list stmt
  | stmt
  | /* empty */
;

stmt:
    assignment
  | block
  | if_stmt
  | while_stmt
;

assignment:
    ID ASSIGN expr SEMICOLON
  | ID LBRACKET expr RBRACKET ASSIGN expr SEMICOLON
;

block:
    LBRACE stmt_list RBRACE
;

if_stmt:
    IF LPAREN cond_expr RPAREN COLON block
  | IF LPAREN cond_expr RPAREN COLON block ELSE COLON block
;

while_stmt:
    WHILE LPAREN cond_expr RPAREN COLON block
;

cond_expr:
    expr EQUALS expr
  | expr NOTEQUAL expr
  | expr LESS expr
  | expr GREATER expr
  | expr LESSEQ expr
  | expr GREATEREQ expr
  | expr
;

expr:
    expr PLUS term
  | expr MINUS term
  | term
;

term:
    term TIMES factor
  | term DIVIDE factor
  | factor
;

factor:
    LPAREN expr RPAREN
  | ID
  | NUMBER
  | ID LBRACKET expr RBRACKET
;